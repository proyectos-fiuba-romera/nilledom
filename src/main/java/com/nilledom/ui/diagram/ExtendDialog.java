package com.nilledom.ui.diagram;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.nilledom.model.ExtendRelation;
import com.nilledom.model.UmlStep;
import com.nilledom.model.UmlUseCase;
import com.nilledom.umldraw.usecase.Extend;
import com.nilledom.util.Msg;

import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
import java.util.List;

public class ExtendDialog extends JDialog {
    private Extend extend;
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JPanel mainPanel;
    private JTextField conditionField;
    private JComboBox extentionCombo;
    private JLabel extentionLabel;
    private JLabel conditionLabel;
    private JLabel showLabel;
    private JCheckBox showCheckbox;
    private JPanel extentionPanel;
    private JPanel conditionPanel;
    private JPanel showPanel;
    private ExtendRelation extendRelation;
    private boolean ok = false;

    public ExtendDialog(Extend extend) {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        this.extend = extend;
        ExtendRelation extendRelation = (ExtendRelation) extend.getModelElement();
        UmlUseCase extendedUseCase = (UmlUseCase) extendRelation.getElement2();
        setTitle(Msg.get("extendDialog.title"));

        extentionLabel.setText(Msg.get("extendDialog.extentionPoint"));

        conditionLabel.setText(Msg.get("extendDialog.condition"));

        showLabel.setText(Msg.get("extendDialog.show"));

        buttonCancel.setText(Msg.get("stdcaption.cancel"));

        buttonOK.setText(Msg.get("stdcaption.ok"));

        this.extendRelation = extendRelation;

        List<UmlStep> extentionSteps = extendedUseCase.getMainFLow().getAllSteps();
        DefaultComboBoxModel<UmlStep> extentionComboModel = new DefaultComboBoxModel<>();
        extentionComboModel.addElement(UmlStep.UNDEFINED);

        for (int i = 0; i < extentionSteps.size(); i++) {
            extentionComboModel.addElement(extentionSteps.get(i));
        }

        extentionCombo.setModel(extentionComboModel);
        conditionField.setText(extendRelation.getCondition());
        showCheckbox.setSelected(extend.getShow());

        if (extendRelation.getExtentionPoint() != null)
            for (int i = 0; i < extentionComboModel.getSize(); i++)
                if (extentionComboModel.getElementAt(i).toString().equals(extendRelation.getExtentionPoint().toString())) {
                    extentionCombo.setSelectedIndex(i);
                    break;
                }
        pack();

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onOK() {
        ok = true;
        extend.setShow(showCheckbox.isSelected());
        ExtendRelation extendRelation = (ExtendRelation) extend.getModelElement();
        extendRelation.setCondition(conditionField.getText());
        extendRelation.setExtentionPoint((UmlStep) extentionCombo.getSelectedItem());

        dispose();
    }

    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    public boolean isOk() {
        return ok;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(mainPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        extentionPanel = new JPanel();
        extentionPanel.setLayout(new GridLayoutManager(1, 2, new Insets(10, 0, 5, 0), -1, -1));
        mainPanel.add(extentionPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        extentionLabel = new JLabel();
        extentionLabel.setText("Label");
        extentionPanel.add(extentionLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        extentionCombo = new JComboBox();
        extentionPanel.add(extentionCombo, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        conditionPanel = new JPanel();
        conditionPanel.setLayout(new GridLayoutManager(1, 2, new Insets(5, 0, 5, 0), -1, -1));
        mainPanel.add(conditionPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        conditionLabel = new JLabel();
        conditionLabel.setText("Label");
        conditionPanel.add(conditionLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        conditionField = new JTextField();
        conditionPanel.add(conditionField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(500, 25), null, 0, false));
        showPanel = new JPanel();
        showPanel.setLayout(new GridLayoutManager(1, 2, new Insets(5, 0, 10, 0), -1, -1));
        mainPanel.add(showPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        showLabel = new JLabel();
        showLabel.setText("Label");
        showPanel.add(showLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showCheckbox = new JCheckBox();
        showCheckbox.setText("");
        showPanel.add(showCheckbox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
